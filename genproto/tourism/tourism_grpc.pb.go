// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: tourism/tourism.proto

package tourism

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TourismService_AddHistorical_FullMethodName          = "/tourism.TourismService/AddHistorical"
	TourismService_UpdateHistorical_FullMethodName       = "/tourism.TourismService/UpdateHistorical"
	TourismService_GetHistoricalByID_FullMethodName      = "/tourism.TourismService/GetHistoricalByID"
	TourismService_ListHistorical_FullMethodName         = "/tourism.TourismService/ListHistorical"
	TourismService_DeleteHistorical_FullMethodName       = "/tourism.TourismService/DeleteHistorical"
	TourismService_SearchHistorical_FullMethodName       = "/tourism.TourismService/SearchHistorical"
	TourismService_GetHistoricalByCountry_FullMethodName = "/tourism.TourismService/GetHistoricalByCountry"
)

// TourismServiceClient is the client API for TourismService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourismServiceClient interface {
	AddHistorical(ctx context.Context, in *Historical, opts ...grpc.CallOption) (*HistoricalResponse, error)
	UpdateHistorical(ctx context.Context, in *UpdateAHistorical, opts ...grpc.CallOption) (*HistoricalResponse, error)
	GetHistoricalByID(ctx context.Context, in *HistoricalId, opts ...grpc.CallOption) (*HistoricalResponse, error)
	ListHistorical(ctx context.Context, in *HistoricalList, opts ...grpc.CallOption) (*HistoricalListResponse, error)
	DeleteHistorical(ctx context.Context, in *HistoricalId, opts ...grpc.CallOption) (*Message, error)
	SearchHistorical(ctx context.Context, in *HistoricalSearch, opts ...grpc.CallOption) (*HistoricalListResponse, error)
	GetHistoricalByCountry(ctx context.Context, in *HistoricalCountry, opts ...grpc.CallOption) (*HistoricalListResponse, error)
}

type tourismServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourismServiceClient(cc grpc.ClientConnInterface) TourismServiceClient {
	return &tourismServiceClient{cc}
}

func (c *tourismServiceClient) AddHistorical(ctx context.Context, in *Historical, opts ...grpc.CallOption) (*HistoricalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalResponse)
	err := c.cc.Invoke(ctx, TourismService_AddHistorical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourismServiceClient) UpdateHistorical(ctx context.Context, in *UpdateAHistorical, opts ...grpc.CallOption) (*HistoricalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalResponse)
	err := c.cc.Invoke(ctx, TourismService_UpdateHistorical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourismServiceClient) GetHistoricalByID(ctx context.Context, in *HistoricalId, opts ...grpc.CallOption) (*HistoricalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalResponse)
	err := c.cc.Invoke(ctx, TourismService_GetHistoricalByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourismServiceClient) ListHistorical(ctx context.Context, in *HistoricalList, opts ...grpc.CallOption) (*HistoricalListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalListResponse)
	err := c.cc.Invoke(ctx, TourismService_ListHistorical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourismServiceClient) DeleteHistorical(ctx context.Context, in *HistoricalId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, TourismService_DeleteHistorical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourismServiceClient) SearchHistorical(ctx context.Context, in *HistoricalSearch, opts ...grpc.CallOption) (*HistoricalListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalListResponse)
	err := c.cc.Invoke(ctx, TourismService_SearchHistorical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourismServiceClient) GetHistoricalByCountry(ctx context.Context, in *HistoricalCountry, opts ...grpc.CallOption) (*HistoricalListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalListResponse)
	err := c.cc.Invoke(ctx, TourismService_GetHistoricalByCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourismServiceServer is the server API for TourismService service.
// All implementations must embed UnimplementedTourismServiceServer
// for forward compatibility
type TourismServiceServer interface {
	AddHistorical(context.Context, *Historical) (*HistoricalResponse, error)
	UpdateHistorical(context.Context, *UpdateAHistorical) (*HistoricalResponse, error)
	GetHistoricalByID(context.Context, *HistoricalId) (*HistoricalResponse, error)
	ListHistorical(context.Context, *HistoricalList) (*HistoricalListResponse, error)
	DeleteHistorical(context.Context, *HistoricalId) (*Message, error)
	SearchHistorical(context.Context, *HistoricalSearch) (*HistoricalListResponse, error)
	GetHistoricalByCountry(context.Context, *HistoricalCountry) (*HistoricalListResponse, error)
	mustEmbedUnimplementedTourismServiceServer()
}

// UnimplementedTourismServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTourismServiceServer struct {
}

func (UnimplementedTourismServiceServer) AddHistorical(context.Context, *Historical) (*HistoricalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHistorical not implemented")
}
func (UnimplementedTourismServiceServer) UpdateHistorical(context.Context, *UpdateAHistorical) (*HistoricalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHistorical not implemented")
}
func (UnimplementedTourismServiceServer) GetHistoricalByID(context.Context, *HistoricalId) (*HistoricalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalByID not implemented")
}
func (UnimplementedTourismServiceServer) ListHistorical(context.Context, *HistoricalList) (*HistoricalListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistorical not implemented")
}
func (UnimplementedTourismServiceServer) DeleteHistorical(context.Context, *HistoricalId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistorical not implemented")
}
func (UnimplementedTourismServiceServer) SearchHistorical(context.Context, *HistoricalSearch) (*HistoricalListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHistorical not implemented")
}
func (UnimplementedTourismServiceServer) GetHistoricalByCountry(context.Context, *HistoricalCountry) (*HistoricalListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalByCountry not implemented")
}
func (UnimplementedTourismServiceServer) mustEmbedUnimplementedTourismServiceServer() {}

// UnsafeTourismServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourismServiceServer will
// result in compilation errors.
type UnsafeTourismServiceServer interface {
	mustEmbedUnimplementedTourismServiceServer()
}

func RegisterTourismServiceServer(s grpc.ServiceRegistrar, srv TourismServiceServer) {
	s.RegisterService(&TourismService_ServiceDesc, srv)
}

func _TourismService_AddHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Historical)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourismServiceServer).AddHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourismService_AddHistorical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourismServiceServer).AddHistorical(ctx, req.(*Historical))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourismService_UpdateHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAHistorical)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourismServiceServer).UpdateHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourismService_UpdateHistorical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourismServiceServer).UpdateHistorical(ctx, req.(*UpdateAHistorical))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourismService_GetHistoricalByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourismServiceServer).GetHistoricalByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourismService_GetHistoricalByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourismServiceServer).GetHistoricalByID(ctx, req.(*HistoricalId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourismService_ListHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourismServiceServer).ListHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourismService_ListHistorical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourismServiceServer).ListHistorical(ctx, req.(*HistoricalList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourismService_DeleteHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourismServiceServer).DeleteHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourismService_DeleteHistorical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourismServiceServer).DeleteHistorical(ctx, req.(*HistoricalId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourismService_SearchHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourismServiceServer).SearchHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourismService_SearchHistorical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourismServiceServer).SearchHistorical(ctx, req.(*HistoricalSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourismService_GetHistoricalByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalCountry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourismServiceServer).GetHistoricalByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourismService_GetHistoricalByCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourismServiceServer).GetHistoricalByCountry(ctx, req.(*HistoricalCountry))
	}
	return interceptor(ctx, in, info, handler)
}

// TourismService_ServiceDesc is the grpc.ServiceDesc for TourismService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourismService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tourism.TourismService",
	HandlerType: (*TourismServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHistorical",
			Handler:    _TourismService_AddHistorical_Handler,
		},
		{
			MethodName: "UpdateHistorical",
			Handler:    _TourismService_UpdateHistorical_Handler,
		},
		{
			MethodName: "GetHistoricalByID",
			Handler:    _TourismService_GetHistoricalByID_Handler,
		},
		{
			MethodName: "ListHistorical",
			Handler:    _TourismService_ListHistorical_Handler,
		},
		{
			MethodName: "DeleteHistorical",
			Handler:    _TourismService_DeleteHistorical_Handler,
		},
		{
			MethodName: "SearchHistorical",
			Handler:    _TourismService_SearchHistorical_Handler,
		},
		{
			MethodName: "GetHistoricalByCountry",
			Handler:    _TourismService_GetHistoricalByCountry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tourism/tourism.proto",
}
