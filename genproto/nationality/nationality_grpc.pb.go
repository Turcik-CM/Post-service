// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: nationality/nationality.proto

package nationality

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NationalityService_CreateNationalFood_FullMethodName       = "/nationality.NationalityService/CreateNationalFood"
	NationalityService_UpdateNationalFoods_FullMethodName      = "/nationality.NationalityService/UpdateNationalFoods"
	NationalityService_GetNationalFoodByID_FullMethodName      = "/nationality.NationalityService/GetNationalFoodByID"
	NationalityService_ListNationalFood_FullMethodName         = "/nationality.NationalityService/ListNationalFood"
	NationalityService_DeleteNationalFood_FullMethodName       = "/nationality.NationalityService/DeleteNationalFood"
	NationalityService_AddNationalFoodImage_FullMethodName     = "/nationality.NationalityService/AddNationalFoodImage"
	NationalityService_RemoveNationalFoodImage_FullMethodName  = "/nationality.NationalityService/RemoveNationalFoodImage"
	NationalityService_GetNationalFoodByCountry_FullMethodName = "/nationality.NationalityService/GetNationalFoodByCountry"
	NationalityService_SearchNationalFood_FullMethodName       = "/nationality.NationalityService/SearchNationalFood"
	NationalityService_GetRatingNationalFood_FullMethodName    = "/nationality.NationalityService/GetRatingNationalFood"
	NationalityService_AddHistorical_FullMethodName            = "/nationality.NationalityService/AddHistorical"
	NationalityService_UpdateHistoricals_FullMethodName        = "/nationality.NationalityService/UpdateHistoricals"
	NationalityService_GetHistoricalByID_FullMethodName        = "/nationality.NationalityService/GetHistoricalByID"
	NationalityService_ListHistorical_FullMethodName           = "/nationality.NationalityService/ListHistorical"
	NationalityService_DeleteHistorical_FullMethodName         = "/nationality.NationalityService/DeleteHistorical"
	NationalityService_SearchHistorical_FullMethodName         = "/nationality.NationalityService/SearchHistorical"
	NationalityService_GetHistoricalByCountry_FullMethodName   = "/nationality.NationalityService/GetHistoricalByCountry"
	NationalityService_AddHistoricalImage_FullMethodName       = "/nationality.NationalityService/AddHistoricalImage"
	NationalityService_RemoveHistoricalImage_FullMethodName    = "/nationality.NationalityService/RemoveHistoricalImage"
	NationalityService_CreateAttraction_FullMethodName         = "/nationality.NationalityService/CreateAttraction"
	NationalityService_UpdateAttractions_FullMethodName        = "/nationality.NationalityService/UpdateAttractions"
	NationalityService_GetAttractionByID_FullMethodName        = "/nationality.NationalityService/GetAttractionByID"
	NationalityService_ListAttraction_FullMethodName           = "/nationality.NationalityService/ListAttraction"
	NationalityService_DeleteAttraction_FullMethodName         = "/nationality.NationalityService/DeleteAttraction"
	NationalityService_AddAttractionImage_FullMethodName       = "/nationality.NationalityService/AddAttractionImage"
	NationalityService_RemoveAttractionImage_FullMethodName    = "/nationality.NationalityService/RemoveAttractionImage"
	NationalityService_SearchAttraction_FullMethodName         = "/nationality.NationalityService/SearchAttraction"
	NationalityService_CreateAttractionType_FullMethodName     = "/nationality.NationalityService/CreateAttractionType"
	NationalityService_GetAttractionType_FullMethodName        = "/nationality.NationalityService/GetAttractionType"
	NationalityService_UpdateAttractionType_FullMethodName     = "/nationality.NationalityService/UpdateAttractionType"
	NationalityService_DeleteAttractionType_FullMethodName     = "/nationality.NationalityService/DeleteAttractionType"
	NationalityService_ListAttractionTypes_FullMethodName      = "/nationality.NationalityService/ListAttractionTypes"
	NationalityService_CreateCountry_FullMethodName            = "/nationality.NationalityService/CreateCountry"
	NationalityService_GetCountry_FullMethodName               = "/nationality.NationalityService/GetCountry"
	NationalityService_UpdateCountry_FullMethodName            = "/nationality.NationalityService/UpdateCountry"
	NationalityService_DeleteCountry_FullMethodName            = "/nationality.NationalityService/DeleteCountry"
	NationalityService_ListCountries_FullMethodName            = "/nationality.NationalityService/ListCountries"
	NationalityService_CreateCity_FullMethodName               = "/nationality.NationalityService/CreateCity"
	NationalityService_GetCity_FullMethodName                  = "/nationality.NationalityService/GetCity"
	NationalityService_UpdateCity_FullMethodName               = "/nationality.NationalityService/UpdateCity"
	NationalityService_DeleteCity_FullMethodName               = "/nationality.NationalityService/DeleteCity"
	NationalityService_ListCity_FullMethodName                 = "/nationality.NationalityService/ListCity"
	NationalityService_GetBYCount_FullMethodName               = "/nationality.NationalityService/GetBYCount"
)

// NationalityServiceClient is the client API for NationalityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NationalityServiceClient interface {
	// National Foods
	CreateNationalFood(ctx context.Context, in *NationalFood, opts ...grpc.CallOption) (*NationalFoodResponse, error)
	UpdateNationalFoods(ctx context.Context, in *UpdateNationalFood, opts ...grpc.CallOption) (*NationalFoodResponse, error)
	GetNationalFoodByID(ctx context.Context, in *NationalFoodId, opts ...grpc.CallOption) (*NationalFoodResponse, error)
	ListNationalFood(ctx context.Context, in *NationalFoodList, opts ...grpc.CallOption) (*NationalFoodListResponse, error)
	DeleteNationalFood(ctx context.Context, in *NationalFoodId, opts ...grpc.CallOption) (*Message, error)
	AddNationalFoodImage(ctx context.Context, in *NationalFoodImage, opts ...grpc.CallOption) (*Message, error)
	RemoveNationalFoodImage(ctx context.Context, in *NationalFoodImage, opts ...grpc.CallOption) (*Message, error)
	GetNationalFoodByCountry(ctx context.Context, in *NationalFoodCountry, opts ...grpc.CallOption) (*NationalFoodListResponse, error)
	SearchNationalFood(ctx context.Context, in *NationalFoodSearch, opts ...grpc.CallOption) (*NationalFoodListResponse, error)
	GetRatingNationalFood(ctx context.Context, in *NationalFoodId, opts ...grpc.CallOption) (*RatingResponse, error)
	// Historical
	AddHistorical(ctx context.Context, in *Historical, opts ...grpc.CallOption) (*HistoricalResponse, error)
	UpdateHistoricals(ctx context.Context, in *UpdateHistorical, opts ...grpc.CallOption) (*HistoricalResponse, error)
	GetHistoricalByID(ctx context.Context, in *HistoricalId, opts ...grpc.CallOption) (*HistoricalResponse, error)
	ListHistorical(ctx context.Context, in *HistoricalList, opts ...grpc.CallOption) (*HistoricalListResponse, error)
	DeleteHistorical(ctx context.Context, in *HistoricalId, opts ...grpc.CallOption) (*Message, error)
	SearchHistorical(ctx context.Context, in *HistoricalSearch, opts ...grpc.CallOption) (*HistoricalListResponse, error)
	GetHistoricalByCountry(ctx context.Context, in *HistoricalCountry, opts ...grpc.CallOption) (*HistoricalListResponse, error)
	AddHistoricalImage(ctx context.Context, in *HistoricalImage, opts ...grpc.CallOption) (*Message, error)
	RemoveHistoricalImage(ctx context.Context, in *HistoricalImage, opts ...grpc.CallOption) (*Message, error)
	// Attractions
	CreateAttraction(ctx context.Context, in *Attraction, opts ...grpc.CallOption) (*AttractionResponse, error)
	UpdateAttractions(ctx context.Context, in *UpdateAttraction, opts ...grpc.CallOption) (*AttractionResponse, error)
	GetAttractionByID(ctx context.Context, in *AttractionId, opts ...grpc.CallOption) (*AttractionResponse, error)
	ListAttraction(ctx context.Context, in *AttractionList, opts ...grpc.CallOption) (*AttractionListResponse, error)
	DeleteAttraction(ctx context.Context, in *AttractionId, opts ...grpc.CallOption) (*Message, error)
	AddAttractionImage(ctx context.Context, in *AttractionImage, opts ...grpc.CallOption) (*Message, error)
	RemoveAttractionImage(ctx context.Context, in *AttractionImage, opts ...grpc.CallOption) (*Message, error)
	SearchAttraction(ctx context.Context, in *AttractionSearch, opts ...grpc.CallOption) (*AttractionListResponse, error)
	CreateAttractionType(ctx context.Context, in *CreateAttractionTypeRequest, opts ...grpc.CallOption) (*CreateAttractionTypeResponse, error)
	GetAttractionType(ctx context.Context, in *GetAttractionTypeRequest, opts ...grpc.CallOption) (*GetAttractionTypeResponse, error)
	UpdateAttractionType(ctx context.Context, in *UpdateAttractionTypeRequest, opts ...grpc.CallOption) (*UpdateAttractionTypeResponse, error)
	DeleteAttractionType(ctx context.Context, in *DeleteAttractionTypeRequest, opts ...grpc.CallOption) (*Message, error)
	ListAttractionTypes(ctx context.Context, in *ListAttractionTypesRequest, opts ...grpc.CallOption) (*ListAttractionTypesResponse, error)
	// countries
	CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error)
	GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error)
	UpdateCountry(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error)
	DeleteCountry(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*Message, error)
	ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error)
	CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error)
	GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error)
	UpdateCity(ctx context.Context, in *CreateCityResponse, opts ...grpc.CallOption) (*CreateCityResponse, error)
	DeleteCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*Message, error)
	ListCity(ctx context.Context, in *ListCityRequest, opts ...grpc.CallOption) (*GetListCountry, error)
	GetBYCount(ctx context.Context, in *CountryId, opts ...grpc.CallOption) (*GetListCountry, error)
}

type nationalityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNationalityServiceClient(cc grpc.ClientConnInterface) NationalityServiceClient {
	return &nationalityServiceClient{cc}
}

func (c *nationalityServiceClient) CreateNationalFood(ctx context.Context, in *NationalFood, opts ...grpc.CallOption) (*NationalFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalFoodResponse)
	err := c.cc.Invoke(ctx, NationalityService_CreateNationalFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) UpdateNationalFoods(ctx context.Context, in *UpdateNationalFood, opts ...grpc.CallOption) (*NationalFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalFoodResponse)
	err := c.cc.Invoke(ctx, NationalityService_UpdateNationalFoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetNationalFoodByID(ctx context.Context, in *NationalFoodId, opts ...grpc.CallOption) (*NationalFoodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalFoodResponse)
	err := c.cc.Invoke(ctx, NationalityService_GetNationalFoodByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) ListNationalFood(ctx context.Context, in *NationalFoodList, opts ...grpc.CallOption) (*NationalFoodListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalFoodListResponse)
	err := c.cc.Invoke(ctx, NationalityService_ListNationalFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) DeleteNationalFood(ctx context.Context, in *NationalFoodId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_DeleteNationalFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) AddNationalFoodImage(ctx context.Context, in *NationalFoodImage, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_AddNationalFoodImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) RemoveNationalFoodImage(ctx context.Context, in *NationalFoodImage, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_RemoveNationalFoodImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetNationalFoodByCountry(ctx context.Context, in *NationalFoodCountry, opts ...grpc.CallOption) (*NationalFoodListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalFoodListResponse)
	err := c.cc.Invoke(ctx, NationalityService_GetNationalFoodByCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) SearchNationalFood(ctx context.Context, in *NationalFoodSearch, opts ...grpc.CallOption) (*NationalFoodListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalFoodListResponse)
	err := c.cc.Invoke(ctx, NationalityService_SearchNationalFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetRatingNationalFood(ctx context.Context, in *NationalFoodId, opts ...grpc.CallOption) (*RatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RatingResponse)
	err := c.cc.Invoke(ctx, NationalityService_GetRatingNationalFood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) AddHistorical(ctx context.Context, in *Historical, opts ...grpc.CallOption) (*HistoricalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalResponse)
	err := c.cc.Invoke(ctx, NationalityService_AddHistorical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) UpdateHistoricals(ctx context.Context, in *UpdateHistorical, opts ...grpc.CallOption) (*HistoricalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalResponse)
	err := c.cc.Invoke(ctx, NationalityService_UpdateHistoricals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetHistoricalByID(ctx context.Context, in *HistoricalId, opts ...grpc.CallOption) (*HistoricalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalResponse)
	err := c.cc.Invoke(ctx, NationalityService_GetHistoricalByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) ListHistorical(ctx context.Context, in *HistoricalList, opts ...grpc.CallOption) (*HistoricalListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalListResponse)
	err := c.cc.Invoke(ctx, NationalityService_ListHistorical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) DeleteHistorical(ctx context.Context, in *HistoricalId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_DeleteHistorical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) SearchHistorical(ctx context.Context, in *HistoricalSearch, opts ...grpc.CallOption) (*HistoricalListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalListResponse)
	err := c.cc.Invoke(ctx, NationalityService_SearchHistorical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetHistoricalByCountry(ctx context.Context, in *HistoricalCountry, opts ...grpc.CallOption) (*HistoricalListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalListResponse)
	err := c.cc.Invoke(ctx, NationalityService_GetHistoricalByCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) AddHistoricalImage(ctx context.Context, in *HistoricalImage, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_AddHistoricalImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) RemoveHistoricalImage(ctx context.Context, in *HistoricalImage, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_RemoveHistoricalImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) CreateAttraction(ctx context.Context, in *Attraction, opts ...grpc.CallOption) (*AttractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttractionResponse)
	err := c.cc.Invoke(ctx, NationalityService_CreateAttraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) UpdateAttractions(ctx context.Context, in *UpdateAttraction, opts ...grpc.CallOption) (*AttractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttractionResponse)
	err := c.cc.Invoke(ctx, NationalityService_UpdateAttractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetAttractionByID(ctx context.Context, in *AttractionId, opts ...grpc.CallOption) (*AttractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttractionResponse)
	err := c.cc.Invoke(ctx, NationalityService_GetAttractionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) ListAttraction(ctx context.Context, in *AttractionList, opts ...grpc.CallOption) (*AttractionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttractionListResponse)
	err := c.cc.Invoke(ctx, NationalityService_ListAttraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) DeleteAttraction(ctx context.Context, in *AttractionId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_DeleteAttraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) AddAttractionImage(ctx context.Context, in *AttractionImage, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_AddAttractionImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) RemoveAttractionImage(ctx context.Context, in *AttractionImage, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_RemoveAttractionImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) SearchAttraction(ctx context.Context, in *AttractionSearch, opts ...grpc.CallOption) (*AttractionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttractionListResponse)
	err := c.cc.Invoke(ctx, NationalityService_SearchAttraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) CreateAttractionType(ctx context.Context, in *CreateAttractionTypeRequest, opts ...grpc.CallOption) (*CreateAttractionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAttractionTypeResponse)
	err := c.cc.Invoke(ctx, NationalityService_CreateAttractionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetAttractionType(ctx context.Context, in *GetAttractionTypeRequest, opts ...grpc.CallOption) (*GetAttractionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttractionTypeResponse)
	err := c.cc.Invoke(ctx, NationalityService_GetAttractionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) UpdateAttractionType(ctx context.Context, in *UpdateAttractionTypeRequest, opts ...grpc.CallOption) (*UpdateAttractionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAttractionTypeResponse)
	err := c.cc.Invoke(ctx, NationalityService_UpdateAttractionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) DeleteAttractionType(ctx context.Context, in *DeleteAttractionTypeRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_DeleteAttractionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) ListAttractionTypes(ctx context.Context, in *ListAttractionTypesRequest, opts ...grpc.CallOption) (*ListAttractionTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAttractionTypesResponse)
	err := c.cc.Invoke(ctx, NationalityService_ListAttractionTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCountryResponse)
	err := c.cc.Invoke(ctx, NationalityService_CreateCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCountryResponse)
	err := c.cc.Invoke(ctx, NationalityService_GetCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) UpdateCountry(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*UpdateCountryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCountryResponse)
	err := c.cc.Invoke(ctx, NationalityService_UpdateCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) DeleteCountry(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_DeleteCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCountriesResponse)
	err := c.cc.Invoke(ctx, NationalityService_ListCountries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCityResponse)
	err := c.cc.Invoke(ctx, NationalityService_CreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*CreateCityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCityResponse)
	err := c.cc.Invoke(ctx, NationalityService_GetCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) UpdateCity(ctx context.Context, in *CreateCityResponse, opts ...grpc.CallOption) (*CreateCityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCityResponse)
	err := c.cc.Invoke(ctx, NationalityService_UpdateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) DeleteCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, NationalityService_DeleteCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) ListCity(ctx context.Context, in *ListCityRequest, opts ...grpc.CallOption) (*GetListCountry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListCountry)
	err := c.cc.Invoke(ctx, NationalityService_ListCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nationalityServiceClient) GetBYCount(ctx context.Context, in *CountryId, opts ...grpc.CallOption) (*GetListCountry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListCountry)
	err := c.cc.Invoke(ctx, NationalityService_GetBYCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NationalityServiceServer is the server API for NationalityService service.
// All implementations must embed UnimplementedNationalityServiceServer
// for forward compatibility
type NationalityServiceServer interface {
	// National Foods
	CreateNationalFood(context.Context, *NationalFood) (*NationalFoodResponse, error)
	UpdateNationalFoods(context.Context, *UpdateNationalFood) (*NationalFoodResponse, error)
	GetNationalFoodByID(context.Context, *NationalFoodId) (*NationalFoodResponse, error)
	ListNationalFood(context.Context, *NationalFoodList) (*NationalFoodListResponse, error)
	DeleteNationalFood(context.Context, *NationalFoodId) (*Message, error)
	AddNationalFoodImage(context.Context, *NationalFoodImage) (*Message, error)
	RemoveNationalFoodImage(context.Context, *NationalFoodImage) (*Message, error)
	GetNationalFoodByCountry(context.Context, *NationalFoodCountry) (*NationalFoodListResponse, error)
	SearchNationalFood(context.Context, *NationalFoodSearch) (*NationalFoodListResponse, error)
	GetRatingNationalFood(context.Context, *NationalFoodId) (*RatingResponse, error)
	// Historical
	AddHistorical(context.Context, *Historical) (*HistoricalResponse, error)
	UpdateHistoricals(context.Context, *UpdateHistorical) (*HistoricalResponse, error)
	GetHistoricalByID(context.Context, *HistoricalId) (*HistoricalResponse, error)
	ListHistorical(context.Context, *HistoricalList) (*HistoricalListResponse, error)
	DeleteHistorical(context.Context, *HistoricalId) (*Message, error)
	SearchHistorical(context.Context, *HistoricalSearch) (*HistoricalListResponse, error)
	GetHistoricalByCountry(context.Context, *HistoricalCountry) (*HistoricalListResponse, error)
	AddHistoricalImage(context.Context, *HistoricalImage) (*Message, error)
	RemoveHistoricalImage(context.Context, *HistoricalImage) (*Message, error)
	// Attractions
	CreateAttraction(context.Context, *Attraction) (*AttractionResponse, error)
	UpdateAttractions(context.Context, *UpdateAttraction) (*AttractionResponse, error)
	GetAttractionByID(context.Context, *AttractionId) (*AttractionResponse, error)
	ListAttraction(context.Context, *AttractionList) (*AttractionListResponse, error)
	DeleteAttraction(context.Context, *AttractionId) (*Message, error)
	AddAttractionImage(context.Context, *AttractionImage) (*Message, error)
	RemoveAttractionImage(context.Context, *AttractionImage) (*Message, error)
	SearchAttraction(context.Context, *AttractionSearch) (*AttractionListResponse, error)
	CreateAttractionType(context.Context, *CreateAttractionTypeRequest) (*CreateAttractionTypeResponse, error)
	GetAttractionType(context.Context, *GetAttractionTypeRequest) (*GetAttractionTypeResponse, error)
	UpdateAttractionType(context.Context, *UpdateAttractionTypeRequest) (*UpdateAttractionTypeResponse, error)
	DeleteAttractionType(context.Context, *DeleteAttractionTypeRequest) (*Message, error)
	ListAttractionTypes(context.Context, *ListAttractionTypesRequest) (*ListAttractionTypesResponse, error)
	// countries
	CreateCountry(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error)
	GetCountry(context.Context, *GetCountryRequest) (*GetCountryResponse, error)
	UpdateCountry(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error)
	DeleteCountry(context.Context, *DeleteCountryRequest) (*Message, error)
	ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error)
	CreateCity(context.Context, *CreateCityRequest) (*CreateCityResponse, error)
	GetCity(context.Context, *GetCityRequest) (*CreateCityResponse, error)
	UpdateCity(context.Context, *CreateCityResponse) (*CreateCityResponse, error)
	DeleteCity(context.Context, *GetCityRequest) (*Message, error)
	ListCity(context.Context, *ListCityRequest) (*GetListCountry, error)
	GetBYCount(context.Context, *CountryId) (*GetListCountry, error)
	mustEmbedUnimplementedNationalityServiceServer()
}

// UnimplementedNationalityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNationalityServiceServer struct {
}

func (UnimplementedNationalityServiceServer) CreateNationalFood(context.Context, *NationalFood) (*NationalFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNationalFood not implemented")
}
func (UnimplementedNationalityServiceServer) UpdateNationalFoods(context.Context, *UpdateNationalFood) (*NationalFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNationalFoods not implemented")
}
func (UnimplementedNationalityServiceServer) GetNationalFoodByID(context.Context, *NationalFoodId) (*NationalFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNationalFoodByID not implemented")
}
func (UnimplementedNationalityServiceServer) ListNationalFood(context.Context, *NationalFoodList) (*NationalFoodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNationalFood not implemented")
}
func (UnimplementedNationalityServiceServer) DeleteNationalFood(context.Context, *NationalFoodId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNationalFood not implemented")
}
func (UnimplementedNationalityServiceServer) AddNationalFoodImage(context.Context, *NationalFoodImage) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNationalFoodImage not implemented")
}
func (UnimplementedNationalityServiceServer) RemoveNationalFoodImage(context.Context, *NationalFoodImage) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNationalFoodImage not implemented")
}
func (UnimplementedNationalityServiceServer) GetNationalFoodByCountry(context.Context, *NationalFoodCountry) (*NationalFoodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNationalFoodByCountry not implemented")
}
func (UnimplementedNationalityServiceServer) SearchNationalFood(context.Context, *NationalFoodSearch) (*NationalFoodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNationalFood not implemented")
}
func (UnimplementedNationalityServiceServer) GetRatingNationalFood(context.Context, *NationalFoodId) (*RatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingNationalFood not implemented")
}
func (UnimplementedNationalityServiceServer) AddHistorical(context.Context, *Historical) (*HistoricalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHistorical not implemented")
}
func (UnimplementedNationalityServiceServer) UpdateHistoricals(context.Context, *UpdateHistorical) (*HistoricalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHistoricals not implemented")
}
func (UnimplementedNationalityServiceServer) GetHistoricalByID(context.Context, *HistoricalId) (*HistoricalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalByID not implemented")
}
func (UnimplementedNationalityServiceServer) ListHistorical(context.Context, *HistoricalList) (*HistoricalListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistorical not implemented")
}
func (UnimplementedNationalityServiceServer) DeleteHistorical(context.Context, *HistoricalId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistorical not implemented")
}
func (UnimplementedNationalityServiceServer) SearchHistorical(context.Context, *HistoricalSearch) (*HistoricalListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHistorical not implemented")
}
func (UnimplementedNationalityServiceServer) GetHistoricalByCountry(context.Context, *HistoricalCountry) (*HistoricalListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalByCountry not implemented")
}
func (UnimplementedNationalityServiceServer) AddHistoricalImage(context.Context, *HistoricalImage) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHistoricalImage not implemented")
}
func (UnimplementedNationalityServiceServer) RemoveHistoricalImage(context.Context, *HistoricalImage) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHistoricalImage not implemented")
}
func (UnimplementedNationalityServiceServer) CreateAttraction(context.Context, *Attraction) (*AttractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttraction not implemented")
}
func (UnimplementedNationalityServiceServer) UpdateAttractions(context.Context, *UpdateAttraction) (*AttractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttractions not implemented")
}
func (UnimplementedNationalityServiceServer) GetAttractionByID(context.Context, *AttractionId) (*AttractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttractionByID not implemented")
}
func (UnimplementedNationalityServiceServer) ListAttraction(context.Context, *AttractionList) (*AttractionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttraction not implemented")
}
func (UnimplementedNationalityServiceServer) DeleteAttraction(context.Context, *AttractionId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttraction not implemented")
}
func (UnimplementedNationalityServiceServer) AddAttractionImage(context.Context, *AttractionImage) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttractionImage not implemented")
}
func (UnimplementedNationalityServiceServer) RemoveAttractionImage(context.Context, *AttractionImage) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAttractionImage not implemented")
}
func (UnimplementedNationalityServiceServer) SearchAttraction(context.Context, *AttractionSearch) (*AttractionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAttraction not implemented")
}
func (UnimplementedNationalityServiceServer) CreateAttractionType(context.Context, *CreateAttractionTypeRequest) (*CreateAttractionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttractionType not implemented")
}
func (UnimplementedNationalityServiceServer) GetAttractionType(context.Context, *GetAttractionTypeRequest) (*GetAttractionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttractionType not implemented")
}
func (UnimplementedNationalityServiceServer) UpdateAttractionType(context.Context, *UpdateAttractionTypeRequest) (*UpdateAttractionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttractionType not implemented")
}
func (UnimplementedNationalityServiceServer) DeleteAttractionType(context.Context, *DeleteAttractionTypeRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttractionType not implemented")
}
func (UnimplementedNationalityServiceServer) ListAttractionTypes(context.Context, *ListAttractionTypesRequest) (*ListAttractionTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttractionTypes not implemented")
}
func (UnimplementedNationalityServiceServer) CreateCountry(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountry not implemented")
}
func (UnimplementedNationalityServiceServer) GetCountry(context.Context, *GetCountryRequest) (*GetCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}
func (UnimplementedNationalityServiceServer) UpdateCountry(context.Context, *UpdateCountryRequest) (*UpdateCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountry not implemented")
}
func (UnimplementedNationalityServiceServer) DeleteCountry(context.Context, *DeleteCountryRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCountry not implemented")
}
func (UnimplementedNationalityServiceServer) ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (UnimplementedNationalityServiceServer) CreateCity(context.Context, *CreateCityRequest) (*CreateCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedNationalityServiceServer) GetCity(context.Context, *GetCityRequest) (*CreateCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCity not implemented")
}
func (UnimplementedNationalityServiceServer) UpdateCity(context.Context, *CreateCityResponse) (*CreateCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCity not implemented")
}
func (UnimplementedNationalityServiceServer) DeleteCity(context.Context, *GetCityRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedNationalityServiceServer) ListCity(context.Context, *ListCityRequest) (*GetListCountry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCity not implemented")
}
func (UnimplementedNationalityServiceServer) GetBYCount(context.Context, *CountryId) (*GetListCountry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBYCount not implemented")
}
func (UnimplementedNationalityServiceServer) mustEmbedUnimplementedNationalityServiceServer() {}

// UnsafeNationalityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NationalityServiceServer will
// result in compilation errors.
type UnsafeNationalityServiceServer interface {
	mustEmbedUnimplementedNationalityServiceServer()
}

func RegisterNationalityServiceServer(s grpc.ServiceRegistrar, srv NationalityServiceServer) {
	s.RegisterService(&NationalityService_ServiceDesc, srv)
}

func _NationalityService_CreateNationalFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalFood)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).CreateNationalFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_CreateNationalFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).CreateNationalFood(ctx, req.(*NationalFood))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_UpdateNationalFoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNationalFood)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).UpdateNationalFoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_UpdateNationalFoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).UpdateNationalFoods(ctx, req.(*UpdateNationalFood))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetNationalFoodByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalFoodId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetNationalFoodByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetNationalFoodByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetNationalFoodByID(ctx, req.(*NationalFoodId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_ListNationalFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalFoodList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).ListNationalFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_ListNationalFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).ListNationalFood(ctx, req.(*NationalFoodList))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_DeleteNationalFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalFoodId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).DeleteNationalFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_DeleteNationalFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).DeleteNationalFood(ctx, req.(*NationalFoodId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_AddNationalFoodImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalFoodImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).AddNationalFoodImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_AddNationalFoodImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).AddNationalFoodImage(ctx, req.(*NationalFoodImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_RemoveNationalFoodImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalFoodImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).RemoveNationalFoodImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_RemoveNationalFoodImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).RemoveNationalFoodImage(ctx, req.(*NationalFoodImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetNationalFoodByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalFoodCountry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetNationalFoodByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetNationalFoodByCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetNationalFoodByCountry(ctx, req.(*NationalFoodCountry))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_SearchNationalFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalFoodSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).SearchNationalFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_SearchNationalFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).SearchNationalFood(ctx, req.(*NationalFoodSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetRatingNationalFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalFoodId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetRatingNationalFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetRatingNationalFood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetRatingNationalFood(ctx, req.(*NationalFoodId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_AddHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Historical)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).AddHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_AddHistorical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).AddHistorical(ctx, req.(*Historical))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_UpdateHistoricals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHistorical)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).UpdateHistoricals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_UpdateHistoricals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).UpdateHistoricals(ctx, req.(*UpdateHistorical))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetHistoricalByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetHistoricalByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetHistoricalByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetHistoricalByID(ctx, req.(*HistoricalId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_ListHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).ListHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_ListHistorical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).ListHistorical(ctx, req.(*HistoricalList))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_DeleteHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).DeleteHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_DeleteHistorical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).DeleteHistorical(ctx, req.(*HistoricalId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_SearchHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).SearchHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_SearchHistorical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).SearchHistorical(ctx, req.(*HistoricalSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetHistoricalByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalCountry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetHistoricalByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetHistoricalByCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetHistoricalByCountry(ctx, req.(*HistoricalCountry))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_AddHistoricalImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).AddHistoricalImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_AddHistoricalImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).AddHistoricalImage(ctx, req.(*HistoricalImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_RemoveHistoricalImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).RemoveHistoricalImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_RemoveHistoricalImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).RemoveHistoricalImage(ctx, req.(*HistoricalImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_CreateAttraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attraction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).CreateAttraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_CreateAttraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).CreateAttraction(ctx, req.(*Attraction))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_UpdateAttractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttraction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).UpdateAttractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_UpdateAttractions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).UpdateAttractions(ctx, req.(*UpdateAttraction))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetAttractionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttractionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetAttractionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetAttractionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetAttractionByID(ctx, req.(*AttractionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_ListAttraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttractionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).ListAttraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_ListAttraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).ListAttraction(ctx, req.(*AttractionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_DeleteAttraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttractionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).DeleteAttraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_DeleteAttraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).DeleteAttraction(ctx, req.(*AttractionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_AddAttractionImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttractionImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).AddAttractionImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_AddAttractionImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).AddAttractionImage(ctx, req.(*AttractionImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_RemoveAttractionImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttractionImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).RemoveAttractionImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_RemoveAttractionImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).RemoveAttractionImage(ctx, req.(*AttractionImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_SearchAttraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttractionSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).SearchAttraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_SearchAttraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).SearchAttraction(ctx, req.(*AttractionSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_CreateAttractionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttractionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).CreateAttractionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_CreateAttractionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).CreateAttractionType(ctx, req.(*CreateAttractionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetAttractionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttractionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetAttractionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetAttractionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetAttractionType(ctx, req.(*GetAttractionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_UpdateAttractionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttractionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).UpdateAttractionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_UpdateAttractionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).UpdateAttractionType(ctx, req.(*UpdateAttractionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_DeleteAttractionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttractionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).DeleteAttractionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_DeleteAttractionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).DeleteAttractionType(ctx, req.(*DeleteAttractionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_ListAttractionTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttractionTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).ListAttractionTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_ListAttractionTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).ListAttractionTypes(ctx, req.(*ListAttractionTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_CreateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).CreateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_CreateCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).CreateCountry(ctx, req.(*CreateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetCountry(ctx, req.(*GetCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_UpdateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).UpdateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_UpdateCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).UpdateCountry(ctx, req.(*UpdateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_DeleteCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).DeleteCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_DeleteCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).DeleteCountry(ctx, req.(*DeleteCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_ListCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).ListCountries(ctx, req.(*ListCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_CreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).CreateCity(ctx, req.(*CreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetCity(ctx, req.(*GetCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_UpdateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).UpdateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_UpdateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).UpdateCity(ctx, req.(*CreateCityResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_DeleteCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).DeleteCity(ctx, req.(*GetCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_ListCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).ListCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_ListCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).ListCity(ctx, req.(*ListCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NationalityService_GetBYCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NationalityServiceServer).GetBYCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NationalityService_GetBYCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NationalityServiceServer).GetBYCount(ctx, req.(*CountryId))
	}
	return interceptor(ctx, in, info, handler)
}

// NationalityService_ServiceDesc is the grpc.ServiceDesc for NationalityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NationalityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nationality.NationalityService",
	HandlerType: (*NationalityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNationalFood",
			Handler:    _NationalityService_CreateNationalFood_Handler,
		},
		{
			MethodName: "UpdateNationalFoods",
			Handler:    _NationalityService_UpdateNationalFoods_Handler,
		},
		{
			MethodName: "GetNationalFoodByID",
			Handler:    _NationalityService_GetNationalFoodByID_Handler,
		},
		{
			MethodName: "ListNationalFood",
			Handler:    _NationalityService_ListNationalFood_Handler,
		},
		{
			MethodName: "DeleteNationalFood",
			Handler:    _NationalityService_DeleteNationalFood_Handler,
		},
		{
			MethodName: "AddNationalFoodImage",
			Handler:    _NationalityService_AddNationalFoodImage_Handler,
		},
		{
			MethodName: "RemoveNationalFoodImage",
			Handler:    _NationalityService_RemoveNationalFoodImage_Handler,
		},
		{
			MethodName: "GetNationalFoodByCountry",
			Handler:    _NationalityService_GetNationalFoodByCountry_Handler,
		},
		{
			MethodName: "SearchNationalFood",
			Handler:    _NationalityService_SearchNationalFood_Handler,
		},
		{
			MethodName: "GetRatingNationalFood",
			Handler:    _NationalityService_GetRatingNationalFood_Handler,
		},
		{
			MethodName: "AddHistorical",
			Handler:    _NationalityService_AddHistorical_Handler,
		},
		{
			MethodName: "UpdateHistoricals",
			Handler:    _NationalityService_UpdateHistoricals_Handler,
		},
		{
			MethodName: "GetHistoricalByID",
			Handler:    _NationalityService_GetHistoricalByID_Handler,
		},
		{
			MethodName: "ListHistorical",
			Handler:    _NationalityService_ListHistorical_Handler,
		},
		{
			MethodName: "DeleteHistorical",
			Handler:    _NationalityService_DeleteHistorical_Handler,
		},
		{
			MethodName: "SearchHistorical",
			Handler:    _NationalityService_SearchHistorical_Handler,
		},
		{
			MethodName: "GetHistoricalByCountry",
			Handler:    _NationalityService_GetHistoricalByCountry_Handler,
		},
		{
			MethodName: "AddHistoricalImage",
			Handler:    _NationalityService_AddHistoricalImage_Handler,
		},
		{
			MethodName: "RemoveHistoricalImage",
			Handler:    _NationalityService_RemoveHistoricalImage_Handler,
		},
		{
			MethodName: "CreateAttraction",
			Handler:    _NationalityService_CreateAttraction_Handler,
		},
		{
			MethodName: "UpdateAttractions",
			Handler:    _NationalityService_UpdateAttractions_Handler,
		},
		{
			MethodName: "GetAttractionByID",
			Handler:    _NationalityService_GetAttractionByID_Handler,
		},
		{
			MethodName: "ListAttraction",
			Handler:    _NationalityService_ListAttraction_Handler,
		},
		{
			MethodName: "DeleteAttraction",
			Handler:    _NationalityService_DeleteAttraction_Handler,
		},
		{
			MethodName: "AddAttractionImage",
			Handler:    _NationalityService_AddAttractionImage_Handler,
		},
		{
			MethodName: "RemoveAttractionImage",
			Handler:    _NationalityService_RemoveAttractionImage_Handler,
		},
		{
			MethodName: "SearchAttraction",
			Handler:    _NationalityService_SearchAttraction_Handler,
		},
		{
			MethodName: "CreateAttractionType",
			Handler:    _NationalityService_CreateAttractionType_Handler,
		},
		{
			MethodName: "GetAttractionType",
			Handler:    _NationalityService_GetAttractionType_Handler,
		},
		{
			MethodName: "UpdateAttractionType",
			Handler:    _NationalityService_UpdateAttractionType_Handler,
		},
		{
			MethodName: "DeleteAttractionType",
			Handler:    _NationalityService_DeleteAttractionType_Handler,
		},
		{
			MethodName: "ListAttractionTypes",
			Handler:    _NationalityService_ListAttractionTypes_Handler,
		},
		{
			MethodName: "CreateCountry",
			Handler:    _NationalityService_CreateCountry_Handler,
		},
		{
			MethodName: "GetCountry",
			Handler:    _NationalityService_GetCountry_Handler,
		},
		{
			MethodName: "UpdateCountry",
			Handler:    _NationalityService_UpdateCountry_Handler,
		},
		{
			MethodName: "DeleteCountry",
			Handler:    _NationalityService_DeleteCountry_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _NationalityService_ListCountries_Handler,
		},
		{
			MethodName: "CreateCity",
			Handler:    _NationalityService_CreateCity_Handler,
		},
		{
			MethodName: "GetCity",
			Handler:    _NationalityService_GetCity_Handler,
		},
		{
			MethodName: "UpdateCity",
			Handler:    _NationalityService_UpdateCity_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _NationalityService_DeleteCity_Handler,
		},
		{
			MethodName: "ListCity",
			Handler:    _NationalityService_ListCity_Handler,
		},
		{
			MethodName: "GetBYCount",
			Handler:    _NationalityService_GetBYCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nationality/nationality.proto",
}
